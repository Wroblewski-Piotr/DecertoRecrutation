{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/add-strategy/add-strategy.component.ts","webpack:///src/app/components/add-strategy/add-strategy.component.html","webpack:///src/app/components/selected-strategy/selected-strategy.component.ts","webpack:///src/app/components/selected-strategy/selected-strategy.component.html","webpack:///src/app/core/model/SubjectPropagatorObject.ts","webpack:///src/app/core/sheredComponents/button/button.component.ts","webpack:///src/app/core/sheredComponents/button/button.component.html","webpack:///src/app/core/sheredComponents/component-supplier/DeliverableComponentEnum.ts","webpack:///src/app/core/sheredComponents/component-supplier/DeliverableComponentsStore.ts","webpack:///src/app/core/sheredComponents/component-supplier/component-supplier.component.ts","webpack:///src/app/core/sheredComponents/component-supplier/component-supplier.component.html","webpack:///src/app/core/sheredComponents/list/list.component.ts","webpack:///src/app/core/sheredComponents/list/list.component.html","webpack:///src/app/core/sheredComponents/modal/modal.component.ts","webpack:///src/app/core/sheredComponents/modal/modal.component.html","webpack:///src/app/core/sheredComponents/modal/modal.service.ts","webpack:///src/app/core/sheredComponents/spinner/spinner.component.ts","webpack:///src/app/core/sheredComponents/spinner/spinner.component.html","webpack:///src/app/core/utils/ArrayUtils.ts","webpack:///src/app/core/utils/logUtils.ts","webpack:///src/app/core/utils/mapUtils.ts","webpack:///src/app/model/StrategyDto.ts","webpack:///src/app/model/StrategyProcessScore.ts","webpack:///src/app/service/global.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","golbalService","selectedStrategiesChain","Array","compatybilesStrategies","isCompatybilesStrategiesLoading","isSelectedStrategiesChainLoading","reloadCompatybilesStrategies","length","getAllGenerateDataStrategy","subscribe","strategies","lastSelectedStrategy","strategyDto","getAllcompatybileProcessDataStrategies","qualifier","setPropagator","strategyDTO","push","strategyProcessScore","deleteElementFromArray","execute","x","forEach","processScore","Map","AddStrategy","SelectedStrategy","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","parentComponent","AddStrategyComponent","globalService","modalService","importParameters","getParametrFromMap","openAddNewObjectSubscription","getPropagator","subjectPropagatorObject","actionId","openModalByUUID","get","unsubscribe","SelectedStrategyComponent","SubjectPropagatorObject","data","ButtonComponent","buttonClassName","DeliverableComponentEnum","DeliverableComponentsStore","deliverableComponentsMap","set","ComponentSupplierComponent","componentFactoryResolver","cdr","resolver","resolveComponentFactory","deliverableComponentEnum","componentFactory","vf","createComponent","instance","detectChanges","read","ListComponent","parametersOfInnerComponent","listClass","object","map","nameOfBaseObject","ModalComponent","isItOpen","uuid","title","getParametrFromMapOrGetDefault","addCloseButton","zIndex","modalSizeClass","modalId","openModalSubscription","getModalPropagator","openModal","closeModalByButton","modal","document","getElementById","style","display","closeModalByUUID","event","target","ModalService","modalPropagator","next","asObservable","modalUUID","setModalPropagator","providedIn","SpinnerComponent","spinnerClassName","beforeSpinnerMessage","showSpinner","textWheneSpinnerNotActive","ArrayUtils","array","index","indexOf","splice","LogUtils","msg","componentClassName","console","log","Date","JSON","stringify","MapUtils","parametrName","parametersMap","className","parametr","undefined","defaultValue","obj","Object","k","name","from","key","value","StrategyDTO","input","description","StrategyProcessScore","deserialize","GlobalService","http","propagator","strategyQualifier","createParametersForExecuteUrl","pipe","listOfObject","listOfStrategyProcessScore","parameters","substring","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\nimport { StrategyDTO } from './model/strategyDto';\nimport { DeliverableComponentEnum } from './core/sheredComponents/component-supplier/DeliverableComponentEnum';\nimport { SubjectPropagatorObject } from './core/model/SubjectPropagatorObject';\nimport { GlobalService } from './service/global.service';\nimport { ArrayUtils } from './core/utils/ArrayUtils';\nimport { StrategyProcessScore } from './model/StrategyProcessScore';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n\n  selectedStrategiesChain: Array<StrategyProcessScore> = new Array<StrategyProcessScore>();\n  compatybilesStrategies: Array<StrategyDTO> = new Array<StrategyDTO>();\n  isCompatybilesStrategiesLoading = false;\n  isSelectedStrategiesChainLoading = false;\n\n  constructor(private golbalService: GlobalService) {}\n\n  ngOnInit(): void {\n    this.reloadCompatybilesStrategies();\n  }\n\n  reloadCompatybilesStrategies() {\n    this.compatybilesStrategies = new Array<StrategyDTO>();\n\n    this.isCompatybilesStrategiesLoading = true;\n    if (this.selectedStrategiesChain.length === 0) {\n      this.golbalService.getAllGenerateDataStrategy().subscribe(strategies => {\n        this.compatybilesStrategies = strategies;\n        this.isCompatybilesStrategiesLoading = false;\n       });\n    } else {\n      const lastSelectedStrategy = this.selectedStrategiesChain[this.selectedStrategiesChain.length - 1].strategyDto;\n      this.golbalService.getAllcompatybileProcessDataStrategies(lastSelectedStrategy.qualifier).subscribe(strategies => {\n        this.compatybilesStrategies = strategies;\n        this.isCompatybilesStrategiesLoading = false;\n       });\n    }\n  }\n\n  openAddStrategyModal() {\n    this.golbalService.setPropagator(new SubjectPropagatorObject(1, null));\n  }\n\n  addToselectedStrategiesChain(strategyDTO: StrategyDTO) {\n    this.selectedStrategiesChain.push(new StrategyProcessScore(strategyDTO, null));\n    this.reloadCompatybilesStrategies();\n  }\n\n  deleteStrategyFromStrategiesChain(strategyProcessScore: StrategyProcessScore) {\n    ArrayUtils.deleteElementFromArray(this.selectedStrategiesChain, strategyProcessScore);\n    this.reloadCompatybilesStrategies();\n  }\n\n  execute() {\n    this.isSelectedStrategiesChainLoading = true;\n    this.golbalService.execute(this.selectedStrategiesChain).subscribe(x => {\n      this.selectedStrategiesChain = x;\n      this.isSelectedStrategiesChainLoading = false;\n    });\n  }\n\n  deleteAllScores() {\n    this.selectedStrategiesChain.forEach( x => x.processScore = null);\n  }\n\n  clearAllselectedStrategiesChain() {\n    this.selectedStrategiesChain = new Array<StrategyProcessScore>();\n    this.reloadCompatybilesStrategies();\n  }\n\n  isItExecuted(): boolean {\n    if (this.selectedStrategiesChain.length > 0 && this.selectedStrategiesChain[0].processScore != null) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  createNewMap() {\n    return new Map<string, any>();\n  }\n  getDeliverableComponentEnumAddStrategy() {\n    return DeliverableComponentEnum.AddStrategy;\n  }\n  getDeliverableComponentEnumSelectedeStrategy() {\n    return DeliverableComponentEnum.SelectedStrategy;\n  }\n}\n","<div class=\"container\">\n  <div (click)=\"openAddStrategyModal()\" class=\"btn btn-success\" *ngIf=\"!isItExecuted()\"\n    style=\"width: 100%; margin-top: 50px; margin-bottom: 50px\">Dodaj strategie</div>\n\n  <div [style]=\"isItExecuted() ? 'margin-top: 134px' : ''\"></div>\n\n  <app-list\n    [deliverableComponentEnum]=\"getDeliverableComponentEnumSelectedeStrategy()\"\n    [objectList]=\"selectedStrategiesChain\" [nameOfBaseObject]=\"'strategyProcessScore'\"\n    [parametersOfInnerComponent]=\"createNewMap().set('parentComponent', this)\">\n  </app-list>\n\n  <div (click)=\"deleteAllScores()\" class=\"btn btn-warning\" style=\"width: 100%; margin-top: 1px; margin-bottom: 10px\" *ngIf=\"isItExecuted()\">Wyczyść wyniki</div>\n  <div (click)=\"clearAllselectedStrategiesChain()\" class=\"btn btn-danger\" style=\"width: 100%; margin-top: 1px; margin-bottom: 10px\" *ngIf=\"selectedStrategiesChain.length > 0\">Wyczyść wszystkie strategie</div>\n\n  <app-button *ngIf=\"selectedStrategiesChain.length > 0 && !isItExecuted()\" (click)=\"execute()\"\n    [buttonClassName]=\"'btn btn-primary'\"\n    [beforeSpinnerMessage]=\"'zaczekaj'\"\n    [showSpinner]=\"isSelectedStrategiesChainLoading\"\n    [textWheneSpinnerNotActive]=\"'Wykonaj'\">\n  </app-button>\n</div>\n\n<MPW-CMS-modal [importParameters]=\"createNewMap()\n  .set('deliverableComponentEnum', getDeliverableComponentEnumAddStrategy())\n  .set('addCloseButton', true)\n  .set('title', 'dodaj strategie')\n  .set('parametersOfInnerComponent',\n    createNewMap()\n    .set('parentComponent', this))\">\n</MPW-CMS-modal>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { ButtonComponent } from './core/sheredComponents/button/button.component';\nimport { ComponentSupplierComponent } from './core/sheredComponents/component-supplier/component-supplier.component';\nimport { ModalComponent } from './core/sheredComponents/modal/modal.component';\nimport { SpinnerComponent } from './core/sheredComponents/spinner/spinner.component';\nimport { ListComponent } from './core/sheredComponents/list/list.component';\nimport { SelectedStrategyComponent } from './components/selected-strategy/selected-strategy.component';\nimport { AddStrategyComponent } from './components/add-strategy/add-strategy.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ButtonComponent,\n    ComponentSupplierComponent,\n    ModalComponent,\n    SpinnerComponent,\n    ListComponent,\n    SelectedStrategyComponent,\n    AddStrategyComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport { ModalService } from 'src/app/core/sheredComponents/modal/modal.service';\nimport { GlobalService } from 'src/app/service/global.service';\nimport { Subscription } from 'rxjs';\nimport { StrategyDTO } from 'src/app/model/strategyDto';\nimport { AppComponent } from 'src/app/app.component';\nimport { MapUtils } from 'src/app/core/utils/mapUtils';\n\n@Component({\n  selector: 'app-add-strategy',\n  templateUrl: './add-strategy.component.html',\n  styleUrls: ['./add-strategy.component.css']\n})\nexport class AddStrategyComponent implements OnInit, OnDestroy {\n\n  @Input()\n  importParameters = new Map<string, any>();\n\n  parentComponent: AppComponent;\n\n  openAddNewObjectSubscription: Subscription;\n\n  constructor(private globalService: GlobalService,\n              private modalService: ModalService) { }\n\n  ngOnInit(): void {\n\n    this.parentComponent = MapUtils.getParametrFromMap('parentComponent', this.importParameters, 'SelectedStrategyComponent');\n\n    this.openAddNewObjectSubscription = this.globalService.getPropagator().subscribe(subjectPropagatorObject => {\n      if (subjectPropagatorObject.actionId === 1) {\n        this.modalService.openModalByUUID(this.importParameters.get('modalUUID'));\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.openAddNewObjectSubscription.unsubscribe();\n  }\n\n}\n","<div style=\"padding-bottom: 30px; margin-bottom: 30px; border-bottom: 2px solid #ffc107\">\n  <div *ngIf=\"parentComponent.selectedStrategiesChain.length == 0\" style=\"margin-top: 10px;\">\n    Strategie pozyskiwania danych :\n  </div>\n\n  <div *ngIf=\"parentComponent.selectedStrategiesChain.length != 0\">\n    Strategie kompatybilne do strategi :\n    <div style=\"margin-top: 10px;\">\n      nazwa - {{parentComponent.selectedStrategiesChain[parentComponent.selectedStrategiesChain.length-1].strategyDto.qualifier}}\n      <br>\n      opis - {{parentComponent.selectedStrategiesChain[parentComponent.selectedStrategiesChain.length-1].strategyDto.description}}\n    </div>\n  </div>\n</div>\n\n<ng-container *ngIf=\"!parentComponent.isCompatybilesStrategiesLoading\">\n  <div *ngFor=\"let strategy of parentComponent.compatybilesStrategies\"\n    style=\"display: flex; padding-bottom: 30px; margin-bottom: 30px; border-bottom: 2px solid #ffc107\">\n    <div style=\"width: 80%;\">\n      nazwa - {{strategy.qualifier}}\n      <br>\n      opis - {{strategy.description}}\n    </div>\n    <div style=\"width: 15%; display: flex; align-items: center;\"\n      (click)=\"parentComponent.addToselectedStrategiesChain(strategy)\" class=\"btn btn-success\">\n      <div style=\"margin: auto;\">Dodaj</div>\n    </div>\n  </div>\n</ng-container>\n\n<app-spinner\n  [beforeSpinnerMessage]=\"'trwa ładowanie'\"\n  [showSpinner]=\"parentComponent.isCompatybilesStrategiesLoading\">\n</app-spinner>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { StrategyDTO } from 'src/app/model/strategyDto';\nimport { MapUtils } from 'src/app/core/utils/mapUtils';\nimport { AppComponent } from 'src/app/app.component';\nimport { StrategyProcessScore } from 'src/app/model/StrategyProcessScore';\n\n@Component({\n  selector: 'app-selected-strategy',\n  templateUrl: './selected-strategy.component.html',\n  styleUrls: ['./selected-strategy.component.css']\n})\nexport class SelectedStrategyComponent implements OnInit {\n\n  @Input()\n  importParameters = new Map<string, any>();\n\n  strategyProcessScore: StrategyProcessScore;\n  parentComponent: AppComponent;\n\n  onlyGetDataStrategy: boolean;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.strategyProcessScore = MapUtils.getParametrFromMap('strategyProcessScore', this.importParameters, 'SelectedStrategyComponent');\n    this.parentComponent = MapUtils.getParametrFromMap('parentComponent', this.importParameters, 'SelectedStrategyComponent');\n  }\n\n  amILast() {\n    return this.strategyProcessScore === this.parentComponent.selectedStrategiesChain[this.parentComponent.selectedStrategiesChain.length - 1];\n  }\n\n}\n","<div style=\"display: flex; margin-bottom: 30px\"\n  [style]=\"!amILast() ? 'border-bottom: 2px solid #ffc107; padding-bottom: 30px' : ''\">\n  <div style=\"width: 80%;\">\n    nazwa - {{strategyProcessScore.strategyDto.qualifier}}\n    <br>\n    opis - {{strategyProcessScore.strategyDto.description}}\n\n    <div *ngIf=\"strategyProcessScore.processScore != null\">\n      <b>Wynik operacji</b> -\n      <br>\n      {{strategyProcessScore.processScore | json}}\n    </div>\n\n  </div>\n\n  <div style=\"width: 20%; height: 50px; display: flex; align-items: center;\" class=\"btn btn-danger\"\n  (click)=\"parentComponent.deleteStrategyFromStrategiesChain(strategyProcessScore)\" *ngIf=\"amILast() && !parentComponent.isItExecuted()\">\n    <div style=\"margin: auto;\">Usuń</div>\n  </div>\n</div>\n","export class SubjectPropagatorObject<T> {\r\n\r\n  constructor(actionId: number, data: T) {\r\n    this.actionId = actionId;\r\n    this.data = data;\r\n  }\r\n\r\n  public actionId: number;\r\n  public data: T;\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css']\n})\nexport class ButtonComponent implements OnInit {\n\n  @Input()\n  buttonClassName: string;\n\n  @Input()\n  spinnerClassName: string;\n  @Input()\n  beforeSpinnerMessage: string;\n  @Input()\n  showSpinner: boolean;\n  @Input()\n  textWheneSpinnerNotActive: string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.buttonClassName = this.buttonClassName != null ? this.buttonClassName : 'btn btn-success';\n  }\n\n}\n","<button [ngClass]=\"buttonClassName\" [disabled]=\"showSpinner\" style=\"width: 100%; margin-top: 50px; margin-bottom: 50px; display: block; margin: auto\" >\n  <app-spinner\n    [spinnerClassName]='spinnerClassName'\n    [beforeSpinnerMessage]=\"beforeSpinnerMessage\"\n    [showSpinner]=\"showSpinner\"\n    [textWheneSpinnerNotActive]=\"textWheneSpinnerNotActive\">\n  </app-spinner>\n</button>\n","export enum DeliverableComponentEnum {\r\n  SelectedStrategy,\r\n  AddStrategy\r\n}\r\n","import { DeliverableComponentEnum } from './DeliverableComponentEnum';\r\nimport { SelectedStrategyComponent } from 'src/app/components/selected-strategy/selected-strategy.component';\r\nimport { AddStrategyComponent } from 'src/app/components/add-strategy/add-strategy.component';\r\n\r\nexport class DeliverableComponentsStore {\r\n\r\n  static deliverableComponentsMap = new Map<DeliverableComponentEnum, any>()\r\n  .set(DeliverableComponentEnum.SelectedStrategy, SelectedStrategyComponent)\r\n  .set(DeliverableComponentEnum.AddStrategy, AddStrategyComponent);\r\n\r\n}\r\n\r\n","import { Component, OnInit, Input, ViewChild, ViewContainerRef, ComponentFactoryResolver, ChangeDetectorRef, AfterViewInit } from '@angular/core';\nimport { DeliverableComponentEnum } from './DeliverableComponentEnum';\nimport { DeliverableComponentsStore } from './DeliverableComponentsStore';\n\n\n@Component({\n  selector: 'MPW-CMS-component-supplier',\n  templateUrl: './component-supplier.component.html',\n  styleUrls: ['./component-supplier.component.css']\n})\nexport class ComponentSupplierComponent implements OnInit, AfterViewInit {\n\n  @ViewChild('vf', {read: ViewContainerRef})\n  vf: ViewContainerRef;\n\n  @Input()\n  deliverableComponentEnum: DeliverableComponentEnum;\n  @Input()\n  importParameters = new Map<string, any>();\n\n\n  constructor(private componentFactoryResolver: ComponentFactoryResolver, private cdr: ChangeDetectorRef){\n  }\n\n  ngOnInit() {}\n\n  ngAfterViewInit(): void {\n    const resolver = this.componentFactoryResolver.resolveComponentFactory\n    (DeliverableComponentsStore.deliverableComponentsMap.get(this.deliverableComponentEnum));\n\n    const componentFactory =   this.vf.createComponent(resolver);\n\n    componentFactory.instance['importParameters'] = this.importParameters;\n\n    this.cdr.detectChanges();\n  }\n\n}\n","<ng-template #vf></ng-template>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { DeliverableComponentEnum } from '../component-supplier/DeliverableComponentEnum';\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.css']\n})\nexport class ListComponent implements OnInit {\n\n  @Input()\n  deliverableComponentEnum: DeliverableComponentEnum;\n  @Input()\n  objectList: Array<any>;\n  @Input()\n  parametersOfInnerComponent: Map<string, any>;\n  @Input()\n  nameOfBaseObject: string;\n\n  // spinner parameters\n  @Input()\n  spinnerClassName: string;\n  @Input()\n  beforeSpinnerMessage: string;\n  @Input()\n  showSpinner: boolean;\n\n  // parametr stylowania listy\n  @Input()\n  listClass: string;\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n\n    this.parametersOfInnerComponent = this.parametersOfInnerComponent != null\n    ? this.parametersOfInnerComponent\n    : new Map<string, any>();\n\n    this.listClass = this.listClass != null\n    ? this.listClass\n    : 'list';\n  }\n\n  createExportParameters(object: any): Map<string, any> {\n    const map = this.parametersOfInnerComponent;\n    map.set(this.nameOfBaseObject, object);\n    return map;\n  }\n\n}\n","<ul *ngIf=\"objectList != null && showSpinner != true\" [ngClass]=\"listClass\">\n  <li *ngFor=\"let object of objectList\">\n    <MPW-CMS-component-supplier\n        [deliverableComponentEnum]=\"deliverableComponentEnum\"\n        [importParameters]=\"createExportParameters(object)\">\n      </MPW-CMS-component-supplier>\n  </li>\n</ul>\n\n<app-spinner\n  [spinnerClassName]='spinnerClassName'\n  [beforeSpinnerMessage]=\"beforeSpinnerMessage\"\n  [showSpinner]=\"showSpinner\">\n</app-spinner>\n","import * as uuid from 'uuid';\n\nimport { Component, OnInit, Input, HostListener, OnDestroy } from '@angular/core';\nimport { ModalService } from './modal.service';\nimport { Subscription } from 'rxjs';\nimport { DeliverableComponentEnum } from '../component-supplier/DeliverableComponentEnum';\nimport { MapUtils } from '../../utils/mapUtils';\n@Component({\n  selector: 'MPW-CMS-modal',\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.css']\n})\nexport class ModalComponent implements OnInit, OnDestroy {\n\n  constructor(private modalService: ModalService) { }\n\n  @Input()\n  importParameters = new Map<string, any>();\n\n  title: string;\n  deliverableComponentEnum: DeliverableComponentEnum;\n  addCloseButton: boolean;\n  parametersOfInnerComponent: Map<string, any>;\n  zIndex: number;\n  modalSizeClass: string;\n  // <!-- title, selector, addCloseButton, parametersOfInnerComponent, zIndex -->\n  uuid: string;\n  modalId: string;\n  isItOpen = false;\n  openModalSubscription: Subscription;\n  ngOnInit() {\n    this.uuid = uuid.v4();\n    this.deliverableComponentEnum = MapUtils.getParametrFromMap('deliverableComponentEnum', this.importParameters, 'ModalComponent');\n    this.title = MapUtils.getParametrFromMapOrGetDefault('title', this.importParameters, '');\n    this.addCloseButton = MapUtils.getParametrFromMapOrGetDefault('addCloseButton', this.importParameters, true);\n    this.parametersOfInnerComponent = MapUtils.getParametrFromMapOrGetDefault('parametersOfInnerComponent', this.importParameters, new Map<string, any>());\n    this.zIndex = MapUtils.getParametrFromMapOrGetDefault('zIndex', this.importParameters, 1);\n    this.modalSizeClass = MapUtils.getParametrFromMapOrGetDefault('modalSizeClass', this.importParameters, 'modal-classic');\n    this.parametersOfInnerComponent.set('modalUUID', this.uuid);\n    this.modalId = 'myModal' + this.uuid;\n    this.openModalSubscription = this.modalService.getModalPropagator().subscribe(x => {\n      if (x.data === this.uuid) {\n        if (x.actionId === 1) {\n          this.isItOpen = true;\n          this.openModal();\n        }\n        else if (x.actionId === 2 && this.isItOpen) {\n          this.isItOpen = false;\n          this.closeModalByButton();\n        }\n      }\n    });\n  }\n  ngOnDestroy(): void {\n    this.openModalSubscription.unsubscribe();\n  }\n  openModal() {\n    const modal = document.getElementById(this.modalId);\n    modal.style.display = 'block';\n  }\n  closeModalByButton() {\n    const modal = document.getElementById(this.modalId);\n    modal.style.display = 'none';\n    this.modalService.closeModalByUUID(this.uuid);\n    this.isItOpen = false;\n  }\n  @HostListener('window:click', ['$event'])\n  onDocumentClick(event: MouseEvent) {\n    const modal = document.getElementById(this.modalId);\n    if (event.target === modal) {\n      this.modalService.closeModalByUUID(this.uuid);\n      modal.style.display = 'none';\n      this.isItOpen = false;\n    }\n  }\n}\n\n","<div [id]=\"'myModal' + uuid\" class=\"modal\" [ngStyle]=\"{'z-index': zIndex}\">\n  <div [ngClass]=\"'modal-content ' + modalSizeClass\">\n\n    <div class=\"modal-header\">\n      <span *ngIf=\"title != null\">{{title}}</span>\n      <span *ngIf=\"addCloseButton != null && addCloseButton === true\" class=\"close\" (click)=\"closeModalByButton()\">&times;</span>\n    </div>\n\n    <div class=\"modal-body\">\n      <MPW-CMS-component-supplier\n        [deliverableComponentEnum]=\"deliverableComponentEnum\"\n        [importParameters]=\"parametersOfInnerComponent\">\n      </MPW-CMS-component-supplier>\n    </div>\n\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { SubjectPropagatorObject } from '../../model/SubjectPropagatorObject';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModalService {\n\n  private modalPropagator = new Subject<SubjectPropagatorObject<any>>();\n  // 1 - open modal\n  // 2 - close modal\n\n  constructor() { }\n\n  public setModalPropagator(subjectPropagatorObject: SubjectPropagatorObject<string>) {\n    this.modalPropagator.next(subjectPropagatorObject);\n  }\n  public getModalPropagator(): Observable<SubjectPropagatorObject<string>> {\n    return this.modalPropagator.asObservable();\n  }\n\n  public openModalByUUID(modalUUID: string) {\n    if (modalUUID != null) {\n      this.setModalPropagator(new SubjectPropagatorObject(1, modalUUID));\n    }\n  }\n  public closeModalByUUID(modalUUID: string) {\n    if (modalUUID != null) {\n      this.setModalPropagator(new SubjectPropagatorObject(2, modalUUID));\n    }\n  }\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-spinner',\n  templateUrl: './spinner.component.html',\n  styleUrls: ['./spinner.component.css']\n})\nexport class SpinnerComponent implements OnInit {\n\n  @Input()\n  spinnerClassName: string;\n  @Input()\n  beforeSpinnerMessage: string;\n  @Input()\n  showSpinner: boolean;\n  @Input()\n  textWheneSpinnerNotActive: string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.spinnerClassName = this.spinnerClassName != null ? this.spinnerClassName : 'spinner-border text-warning';\n    this.beforeSpinnerMessage = this.beforeSpinnerMessage != null ? this.beforeSpinnerMessage : '';\n    this.showSpinner = this.showSpinner != null ? this.showSpinner : false;\n    this.textWheneSpinnerNotActive = this.textWheneSpinnerNotActive != null ? this.textWheneSpinnerNotActive : '';\n  }\n\n}\n","<div class=\"flex-box-container-spinner\" *ngIf=\"showSpinner\">\n  <div style=\"padding-right: 10px\">{{beforeSpinnerMessage}}</div>\n  <div [ngClass]=\"spinnerClassName\"></div>\n</div>\n<span *ngIf=\"!showSpinner\">{{textWheneSpinnerNotActive}}</span>\n","export class ArrayUtils {\r\n\r\n  public static deleteElementFromArray(array: Array<any>, object: any): any {\r\n    const index = array.indexOf(object, 0);\r\n    if (index > -1) {\r\n      array.splice(index, 1);\r\n    }\r\n  }\r\n}\r\n","export class LogUtils {\r\n\r\n  public static log(msg: string, componentClassName: string) {\r\n    console.log(new Date() + ': ' + componentClassName + ': '\r\n      + JSON.stringify(msg));\r\n  }\r\n}\r\n","import { LogUtils } from './logUtils';\r\n\r\nexport class MapUtils {\r\n\r\n  public static getParametrFromMap(parametrName: string, parametersMap: Map<string, any>, className: string): any {\r\n    const parametr: any = parametersMap.get(parametrName);\r\n    if (parametr === undefined) {\r\n      LogUtils.log('In pass map cant find parameter with name - ' + parametrName, className);\r\n    }\r\n    return parametr;\r\n  }\r\n\r\n  public static getParametrFromMapOrGetDefault(parametrName: string, parametersMap: Map<string, any>, defaultValue: any): any{\r\n    const parametr: any = parametersMap.get(parametrName);\r\n    if (parametr === undefined) {\r\n      return defaultValue;\r\n    }\r\n    return parametr;\r\n  }\r\n\r\n  public static objToMap(obj): Map<string, Array<string>> {\r\n    const map: Map<string, Array<string>> = new Map();\r\n    for (const k of Object.keys(obj)) {\r\n      map.set(k, obj[k]);\r\n    }\r\n    return map;\r\n  }\r\n\r\n  public static getArrayFromMap(map: Map<any, any>, name: any): Array<any> {\r\n    return map.get(name) !== undefined ? map.get(name) : new Array();\r\n  }\r\n\r\n  public static getValuesListFromMap(map: Map<string, any>): Array<any> {\r\n    return Array.from(map, ([key, value]) => value);\r\n  }\r\n\r\n  public static getKeysListFromMap(map: Map<string, any>): Array<string> {\r\n    return Array.from(map, ([key, value]) => key);\r\n  }\r\n}\r\n","export class StrategyDTO {\r\n  qualifier: string;\r\n  description: string;\r\n\r\n  public static deserialize(input: any) {\r\n    if (input == null) {\r\n      return null;\r\n    }\r\n    const object = new this();\r\n\r\n    object.description = input.description;\r\n    object.qualifier = input.qualifier;\r\n\r\n    return object;\r\n  }\r\n}\r\n","import { StrategyDTO } from './StrategyDto';\r\n\r\nexport class StrategyProcessScore {\r\n\r\n  constructor(strategyDto: StrategyDTO, processScore: object) {\r\n    this.strategyDto = strategyDto;\r\n    this.processScore = processScore;\r\n  }\r\n\r\n  strategyDto: StrategyDTO;\r\n  processScore: object;\r\n\r\n  public static deserialize(input: any) {\r\n    if (input == null) {\r\n      return null;\r\n    }\r\n    const object = new this(null, null);\r\n\r\n    object.strategyDto = StrategyDTO.deserialize(input.strategyDTO);\r\n    object.processScore = input.processScore;\r\n\r\n    return object;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Subject, Observable } from 'rxjs';\nimport { SubjectPropagatorObject } from '../core/model/SubjectPropagatorObject';\nimport { StrategyDTO } from '../model/strategyDto';\nimport { StrategyProcessScore } from '../model/StrategyProcessScore';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlobalService {\n\n  constructor(private http: HttpClient) { }\n\n  // 1 - open add strategy modal\n  private propagator = new Subject<SubjectPropagatorObject<any>>();\n\n  public setPropagator(subjectPropagatorObject: SubjectPropagatorObject<any>) {\n    this.propagator.next(subjectPropagatorObject);\n  }\n  public getPropagator(): Observable<SubjectPropagatorObject<any>> {\n    return this.propagator.asObservable();\n  }\n\n  public getAllGenerateDataStrategy(): Observable<Array<StrategyDTO>> {\n    return this.http.get<Array<StrategyDTO>>('/getGenerateDataStrategies');\n  }\n\n  public getAllcompatybileProcessDataStrategies(strategyQualifier: string): Observable<Array<StrategyDTO>> {\n    return this.http.get<Array<StrategyDTO>>('/getCompatibleStrategies?strategyQualifier=' + strategyQualifier);\n  }\n\n  public execute(strategyProcessScore: Array<StrategyProcessScore>) {\n    return this.http.get<Array<StrategyProcessScore>>('/process' + this.createParametersForExecuteUrl(strategyProcessScore)).pipe(\n      map ((listOfObject: Array<object>) => {\n        const listOfStrategyProcessScore = new Array<StrategyProcessScore>();\n        listOfObject.forEach(x => {\n          listOfStrategyProcessScore.push(StrategyProcessScore.deserialize(x));\n        });\n        return listOfStrategyProcessScore;\n      })\n    );\n  }\n\n  private createParametersForExecuteUrl(strategyProcessScore: Array<StrategyProcessScore>): string {\n    let parameters = '?strategyQualifiers=';\n\n    strategyProcessScore.forEach(x => {\n      parameters = parameters + x.strategyDto.qualifier + ',';\n    });\n\n    parameters = parameters.substring(0, parameters.length - 1);\n\n    return parameters;\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}